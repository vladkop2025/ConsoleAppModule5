using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /* Модуль 5. Методы в C# 
            5.4. Области видимости

            Области видимости в программировании — это «границы» существования вашей переменной, метода. То есть контекстом видимости является 
            некая область, в которой методы, объекты, свойства «видят» друг друга.

            Существуют следующие области видимости:
            
            Контекст класса;
            Контекст метода;
            Контекст блока кода.

            Переменные в одном контексте доступны друг для друга. Переменные контекста класса доступны в любом месте этого класса. 
            Переменные контекста метода доступны только для данного метода. Переменные контекста блока кода не доступны нигде за пределами этого блока.

            Два последних контекста называются локальными.

            Давайте возьмем переменные типа int и посмотрим для них разные контексты:

                    class Program
                    {
                         static int num1 = 667;

            num1 — переменная контекста класса (модификатор static указан потому, что мы работаем с классом Program, далее
            подробно будем разбирать это в модулях об ООП). Она доступна везде в рамках данного класса:

                    static int Sum()
                    {
                        var num2 = 1;
                        return num1 + num2;
                    }

            Используем её в методе Sum. У этого метода есть переменная num2, она является локальной для него и не доступна извне.

            Вызовем этот метод и введём еще одну переменную:

                    Console.WriteLine(num1);
                    Console.WriteLine(Sum());
                    if (num1 > 0)
                    {
                         var num3 = 5;
                        Console.WriteLine(num1 + num3);
                    }

            Переменная num3 доступна только из блока кода if. Давайте выведем результаты:

            Попробуем обратиться к num3 из метода Sum. Компилятор выдаст ошибку

                    static int Sum()
                    {
                        var num2 = 1;
                        return num1 + num2 + num3;
                    }

            Обратите внимание: если мы используем совпадающие имена в локальном контексте и контексте уровня класса, 
            то приоритетным будет локальный контекст.

            В этом случае желательно не ставить повторяющиеся имена переменных в метод и в класс — это может вызывать лишнюю путаницу.

            Задание 5.4.1 Выберите соответсвующий контекст переменной Name. Ответ ниже

                    Контекст класса
                    Контекст метода
                    Контекст блока кода

            Задание 5.4.2 Что произойдет, если попытаться обратиться к переменной не из того контекста?

                    Будет ошибка и не скомпилируется

            Задание 5.4.3
            Что выведет на экран следующий код?

using System;

class MainClass {

	int val = 8;

  public static void Main (string[] args) {
    
		int val = 10;
		Doubled(ref val);
		Console.WriteLine(val);
		Console.ReadKey();
  }

	static void Doubled(ref int val)
	{
		val *= 2;
	}
}
                Ответ: 20 локальная переменная метода

            Задание 5.4.4 
            Что выведет на экран следующий код?

using System;

class MainClass {
	int val = 8;

  public static void Main (string[] args) {
    
		int val = 9;
		{
			val++;
		}

		Console.WriteLine(val);
		Console.ReadKey();

  }
}
               
                    Ответ: 10 переменная класса   
            */
        }
    }
}
